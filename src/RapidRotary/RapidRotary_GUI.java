/*
 * Copyright (C) 2016-2018 Shawn E. Gano, shawn@ganotechnologies.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
------  CHANGE LOG -----
v1.0  - 20 Aug 2016 - inital release
v1.0.1 - 20 Aug 2016 - fixed a bug in WRAP_EACH_A_MOVE mode where feedrates were not left on lines when not wrapped in G93
v1.1 - 5 June 2017 -- added option to spcifiy the number of decimal places for F values (to meet needs of some controllers that require less digits)
v1.2.0 - 1 Nov 2017 -- added capability to handle G18 and G19 in addition to looking for G17 (planes)
------------------------
*/

package RapidRotary;

import java.awt.Dimension;
import java.awt.Point;
import static java.awt.SystemColor.window;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Shawn E. Gano, shawn@ganotechnologies.com
 */
public class RapidRotary_GUI extends javax.swing.JFrame 
{
    
    public enum ConversionMode 
    {
       WRAP_ALL, WRAP_EACH_A_MOVE
    } // ConversionMode enum
    
    public enum DistanceUnits 
    {
       INCHES, MM
    } // DistanceUnits enum
    
    
    String versionStr = "v1.2.0";

    /**
     * Creates new form G94toG93Converter
     */
    public RapidRotary_GUI() 
    {
        initComponents();
        
        
        // display window in the center of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        Point p = this.getLocation();
        int x= (dim.width - this.getWidth())/2;
        int y = (dim.height- this.getHeight())/2;
        this.setBounds(x, y, this.getWidth(), this.getHeight()+1);
        
        //set version text
        versionjLabel.setText(versionStr);
        
        // set window icon
        try
        {
            super.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/RapidRotary/images/RapidRotary_icon_150.png")));
            
        } catch (Exception exception)
        {
            exception.printStackTrace();
        }
        
        
    } //G94toG93Converter constructor
    
    
    
    
/**
 * Returns the selected file from a JFileChooser, including the extension from
 * the file filter.
 */
public static File getSelectedFileWithExtension(JFileChooser c) 
{
    File file = c.getSelectedFile();
    if (c.getFileFilter() instanceof FileNameExtensionFilter) {
        String[] exts = ((FileNameExtensionFilter)c.getFileFilter()).getExtensions();
        String nameLower = file.getName().toLowerCase();
        for (String ext : exts) { // check if it already has a valid extension
            if (nameLower.endsWith('.' + ext.toLowerCase())) {
                return file; // if yes, return as-is
            }
        }
        // if not, append the first extension from the selected filter
        file = new File(file.toString() + '.' + exts[0]);
    }
    return file;
} //getSelectedFileWithExtension

public void conversionSwingWorkerFinishedCallback()
{
    // re-enable buttons
    convertFileButton.setEnabled(true);
    inFileBrowsejButton.setEnabled(true);
    outFileBrowsejButton.setEnabled(true);
    zZeroOffsetTextField.setEditable(true);
    zZeroOffsetTextField.setEnabled(true);
    conversionMethodComboBox.setEnabled(true);
    unitsComboBox.setEnabled(true);
    
    conversionProgressBar.setValue(0); // reset progress
    
} //  conversionSwingWorkerFinishedCallback


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        inFilePathTextField = new javax.swing.JTextField();
        inFileBrowsejButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        outFilePathTextField = new javax.swing.JTextField();
        outFileBrowsejButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        convertFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputMessagesTextArea = new javax.swing.JTextArea();
        versionjLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        conversionProgressBar = new javax.swing.JProgressBar();
        InfoHelpButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        zZeroOffsetTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        conversionMethodComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        unitsComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        fPrecisionComboBox = new javax.swing.JComboBox<>();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rapid Rotary");

        jLabel1.setText("Input NC File (G94 - units per minute mode): ");

        inFilePathTextField.setEditable(false);

        inFileBrowsejButton.setText("Browse");
        inFileBrowsejButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                inFileBrowsejButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Output NC File (G93 - inverse time mode):");

        outFilePathTextField.setEditable(false);

        outFileBrowsejButton.setText("Browse");
        outFileBrowsejButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                outFileBrowsejButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Output Messages:");

        convertFileButton.setText("Convert File");
        convertFileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                convertFileButtonActionPerformed(evt);
            }
        });

        outputMessagesTextArea.setColumns(20);
        outputMessagesTextArea.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        outputMessagesTextArea.setRows(5);
        jScrollPane1.setViewportView(outputMessagesTextArea);

        versionjLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        versionjLabel.setText("vX.X");

        jLabel7.setText("Created by: Shawn E. Gano, shawn@ganotechnologies.com");

        InfoHelpButton.setText("Information / Help");
        InfoHelpButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                InfoHelpButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Z-zero Offset Distance from Rotary Axis:");

        zZeroOffsetTextField.setText("0.0");
        zZeroOffsetTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                zZeroOffsetTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("(0.0 means Z0 is centered on A-axis)");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RapidRotary/images/RapidRotary_icon_60.png"))); // NOI18N

        jLabel9.setText("Conversion Method:");

        conversionMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Use G93 mode for entire file (useful for continuous rotary )", "Wrap each rotary move in G93 (useful for indexed strategies)" }));

        jLabel10.setText("Distance Units: ");

        unitsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "inches", "mm" }));
        unitsComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                unitsComboBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Rapid Rotary");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("A G94 to G93 G-code converter");

        jLabel13.setText("F value output decimal digits:");

        fPrecisionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7" }));
        fPrecisionComboBox.setSelectedIndex(5);
        fPrecisionComboBox.setToolTipText("Number of digits after the decimal point writen to the output file for the F value.");
        fPrecisionComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fPrecisionComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(inFilePathTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outFilePathTextField)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(zZeroOffsetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(conversionMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(unitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(48, 48, 48)
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fPrecisionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 14, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(convertFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conversionProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(outFileBrowsejButton))
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inFileBrowsejButton)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(98, 98, 98))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(15, 15, 15)))
                                .addComponent(InfoHelpButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(InfoHelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inFileBrowsejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(outFileBrowsejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(zZeroOffsetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(conversionMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(unitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(fPrecisionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(conversionProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(convertFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(versionjLabel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inFileBrowsejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inFileBrowsejButtonActionPerformed
        // Open file dialog:
        
        JFileChooser fileChooser = new JFileChooser();
        
        // where to start browsing for a file:
        if(inFilePathTextField.getText().trim().length() == 0)
        {
            // default
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        else // if a file has been picked before - start there
        {
            fileChooser.setCurrentDirectory(new File( inFilePathTextField.getText() ));
        } // file open inital path
        
        // setup file filters
        FileFilter ngcFileFilter = new FileNameExtensionFilter("G-code format (LinuxCNC)", "ngc");
        fileChooser.setFileFilter(ngcFileFilter);
        
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected input file: " + selectedFile.getAbsolutePath());
            
            // set text of the infile text field
            inFilePathTextField.setText(selectedFile.getAbsolutePath());
            
            // also "auto" set the output file with a _G93 added before extension
            // add suffix to file
            String name = selectedFile.getName();
            int i = name.contains(".") ? name.lastIndexOf('.') : name.length();
            String outDefaultFilePath = name.substring(0, i) + "_G93" + name.substring(i);
            File outDefaultFile = new File(selectedFile.getParent(), outDefaultFilePath);
            outFilePathTextField.setText(outDefaultFile.getAbsolutePath());
            
        } // if file opened
    }//GEN-LAST:event_inFileBrowsejButtonActionPerformed

    private void outFileBrowsejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outFileBrowsejButtonActionPerformed
        // open dialog for the output file
        
        // Open file dialog:
        
        JFileChooser fileChooser = new JFileChooser();
        
        // where to start browsing for a file: -- start in the same location as the input file
        if(inFilePathTextField.getText().trim().length() == 0)
        {
            // default
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        else // if a file has been picked before - start there
        {
            fileChooser.setCurrentDirectory(new File( inFilePathTextField.getText() ));
        } // file open inital path
        
        // setup file filters
        FileFilter ngcFileFilter = new FileNameExtensionFilter("G-code format (LinuxCNC)", "ngc");
        fileChooser.setFileFilter(ngcFileFilter);
        
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            // custome get file -- and add proper file extension if a filter is selected
            File selectedFile = RapidRotary_GUI.getSelectedFileWithExtension(fileChooser);
            System.out.println("Selected output file: " + selectedFile.getAbsolutePath());
                                    
            // set text of the infile text field
            outFilePathTextField.setText(selectedFile.getAbsolutePath());
            
            
        } // if file opened
        
        
        
      // dialog for the output file  
    }//GEN-LAST:event_outFileBrowsejButtonActionPerformed

    private void convertFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertFileButtonActionPerformed
        
        
        // disable buttons during processing file - to prevent multiple clicks
        convertFileButton.setEnabled(false);
        inFileBrowsejButton.setEnabled(false);
        outFileBrowsejButton.setEnabled(false);
        zZeroOffsetTextField.setEditable(false);
        zZeroOffsetTextField.setEnabled(false);
        conversionMethodComboBox.setEnabled(false);
        unitsComboBox.setEnabled(false);
        
        
        outputMessagesTextArea.setText(""); // clear message area
        
        
        // make sure files are specified
        if(this.inFilePathTextField.getText().trim().length() == 0 )
        {
            JOptionPane.showMessageDialog(this,
                            "The input file is not specified",
                            "File Selection Error",
                            JOptionPane.ERROR_MESSAGE);
            
            conversionSwingWorkerFinishedCallback();
            return;
        } // if in file is missing
        
        if(this.outFilePathTextField.getText().trim().length() == 0 )
        {
            JOptionPane.showMessageDialog(this,
                            "The ouput file is not specified",
                            "File Selection Error",
                            JOptionPane.ERROR_MESSAGE);
            
            conversionSwingWorkerFinishedCallback();
            return;
        } // if out file is missing
        
        
        // make sure the input file exisits
        if ((new File(this.inFilePathTextField.getText())).exists() == false) 
        {
            JOptionPane.showMessageDialog(this,
                    "The input file does not exist",
                    "File Selection Error",
                    JOptionPane.ERROR_MESSAGE);
            
                conversionSwingWorkerFinishedCallback();
            return;
        } // input file doesn't exist
                
        
        // check that input and output files are different
        if(this.inFilePathTextField.getText().equalsIgnoreCase( this.outFilePathTextField.getText() )  )
        {
            JOptionPane.showMessageDialog(this,
                            "The input and output files are the same; please make sure the output file has a different name.",
                            "File Selection Error",
                            JOptionPane.ERROR_MESSAGE);
            
            conversionSwingWorkerFinishedCallback();
            return;
        } // if files are the same
        
        // check that a value for the Z-zero offset exisits
        if(zZeroOffsetTextField.getText().trim().length() == 0)
        {
            JOptionPane.showMessageDialog(this,
                            "The Z-zero Offset Distance from Rotary Axis is missing.  Enter 0.0 if using the center of the material or enter the radius of the material if touching off the top surface.",
                            "Missing Z-zero Offset",
                            JOptionPane.ERROR_MESSAGE);
            
            conversionSwingWorkerFinishedCallback();
            return;
        } // if files are the same
       
        
        // try to convert zZeroOffset to a double
        double zZeroOffset = 0.0f;
        try
        {
            zZeroOffset = new Double( zZeroOffsetTextField.getText().trim() ).doubleValue();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,
                            "The Z-zero Offset Distance from Rotary Axis is invalid.  Enter 0.0 if using the center of the material or enter the radius of the material if touching off the top surface.",
                            "Invalid Z-zero Offset",
                            JOptionPane.ERROR_MESSAGE);
            
            conversionSwingWorkerFinishedCallback();
            return;
        } // error converting zZeroOffset from string to double
        
        
         // get conversion method
        ConversionMode conversionMode = ConversionMode.WRAP_ALL; // default
        switch(this.conversionMethodComboBox.getSelectedIndex())
        {
            case 0: 
                conversionMode = ConversionMode.WRAP_ALL;
                break;
            case 1:
                conversionMode = ConversionMode.WRAP_EACH_A_MOVE;
                break;
            default:
                conversionMode = ConversionMode.WRAP_ALL;
                break;   
        } // switch conversionMethodComboBox
        
        // get units:
        DistanceUnits distUnits = DistanceUnits.INCHES; // default 
        switch(this.unitsComboBox.getSelectedIndex())
        {
            case 0:
                distUnits = DistanceUnits.INCHES;
                break;
            case 1:
                distUnits = DistanceUnits.MM;
                break;
            default:
                distUnits = DistanceUnits.INCHES;
                break;
        } // swtich distUnits
        
        // SEG v1.1 -- F precision
        int fPrecision = 5; // default
        fPrecision = this.fPrecisionComboBox.getSelectedIndex();
        
        
        
        // start converting in a thread // SEG v1.1 added fPrecision
        GlobalFileConverterSwingWorker converter = new GlobalFileConverterSwingWorker(this.inFilePathTextField.getText(),
                this.outFilePathTextField.getText(),zZeroOffset, conversionMode, distUnits, fPrecision, outputMessagesTextArea, this, versionStr);
        // add listener to update progressbar
        converter.addPropertyChangeListener(new PropertyChangeListener() 
        {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("progress".equals(evt.getPropertyName())) {
                    conversionProgressBar.setValue((Integer) evt.getNewValue());
                }
            }

        }
        ); // property listener for converted/ progress bar

        //listen for stop / finish / complete?
        
        // start the conversion
        converter.execute();
        
    }//GEN-LAST:event_convertFileButtonActionPerformed

    private void InfoHelpButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_InfoHelpButtonActionPerformed
    {//GEN-HEADEREND:event_InfoHelpButtonActionPerformed
        // open help window
        HelpInformationJFrame viewCourseGUI = new HelpInformationJFrame();
        
        viewCourseGUI.setLocation(this.getLocation().x+25, this.getLocation().y+35);
        
        viewCourseGUI.setVisible(true);
    }//GEN-LAST:event_InfoHelpButtonActionPerformed

    private void zZeroOffsetTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zZeroOffsetTextFieldActionPerformed
    {//GEN-HEADEREND:event_zZeroOffsetTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zZeroOffsetTextFieldActionPerformed

    private void unitsComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_unitsComboBoxActionPerformed
    {//GEN-HEADEREND:event_unitsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unitsComboBoxActionPerformed

    private void fPrecisionComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fPrecisionComboBoxActionPerformed
    {//GEN-HEADEREND:event_fPrecisionComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fPrecisionComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try 
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) 
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RapidRotary_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RapidRotary_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RapidRotary_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RapidRotary_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RapidRotary_GUI().setVisible(true);
            }
        });
    } // main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton InfoHelpButton;
    private javax.swing.JComboBox<String> conversionMethodComboBox;
    private javax.swing.JProgressBar conversionProgressBar;
    private javax.swing.JButton convertFileButton;
    private javax.swing.JComboBox<String> fPrecisionComboBox;
    private javax.swing.JButton inFileBrowsejButton;
    private javax.swing.JTextField inFilePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton outFileBrowsejButton;
    private javax.swing.JTextField outFilePathTextField;
    private javax.swing.JTextArea outputMessagesTextArea;
    private javax.swing.JComboBox<String> unitsComboBox;
    private javax.swing.JLabel versionjLabel;
    private javax.swing.JTextField zZeroOffsetTextField;
    // End of variables declaration//GEN-END:variables
}
